basePath: /api/v1
definitions:
  errno.errno:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  model.MovieInfo:
    properties:
      actors:
        items:
          type: string
        type: array
      code:
        type: string
      cover:
        type: string
      created_at:
        type: string
      director:
        type: string
      id:
        type: integer
      produce_company:
        type: string
      publish_company:
        type: string
      publish_date:
        type: string
      series:
        type: string
      title:
        type: string
      updated_at:
        type: string
    required:
    - code
    - title
    type: object
  model.MovieTag:
    properties:
      id:
        type: integer
      movie_id:
        type: integer
      tag_id:
        type: integer
    type: object
  model.Tag:
    properties:
      created_at:
        $ref: '#/definitions/time.Time'
      id:
        type: integer
      name:
        type: string
      pid:
        type: integer
      updated_at:
        $ref: '#/definitions/time.Time'
    type: object
  time.Time:
    type: object
externalDocs:
  description: OpenAPI
host: localhost:8080
info:
  contact: {}
  description: This is a sample server celler server.
  license:
    name: MIT
    url: https://opensource.org/license/mit
  title: Garage API
  version: "1"
paths:
  /actor:
    delete:
      description: Delete actor
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete actors
      tags:
      - actor
    get:
      description: Get actors List
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get actors
      tags:
      - actor
    post:
      description: Create actor
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create actors
      tags:
      - actor
  /actor/search:
    get:
      description: Search actors List
      parameters:
      - description: name search by q
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Search actors
      tags:
      - actor
  /anime:
    delete:
      description: Delete animes
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete animes
      tags:
      - anime
    get:
      description: Get animes
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: List animes
      tags:
      - anime
    post:
      description: Create animes
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create animes
      tags:
      - anime
  /movie:
    delete:
      consumes:
      - application/json
      description: Delete movies
      parameters:
      - description: default
        in: body
        name: default
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/errno.errno'
            - properties:
                data:
                  type: object
              type: object
      summary: Delete movies
      tags:
      - movie
    get:
      description: Get movies
      parameters:
      - default: 50
        description: int valid
        in: query
        name: page_size
        type: integer
      - default: 1
        description: int valid
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/errno.errno'
            - properties:
                data:
                  type: object
              type: object
      summary: Get movies
      tags:
      - movie
    post:
      description: Create movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/errno.errno'
      summary: Create movies
      tags:
      - movie
  /movie/:code:
    get:
      description: Get movies
      parameters:
      - description: movie code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/errno.errno'
            - properties:
                data:
                  $ref: '#/definitions/model.MovieInfo'
              type: object
      summary: Get movies
      tags:
      - movie
  /movie_actor:
    delete:
      description: Delete movie actor
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete movie actor
      tags:
      - movie_actor
    get:
      description: Get movie actor
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get movie actor
      tags:
      - movie_actor
    post:
      description: Get movie actor
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get movie actor
      tags:
      - movie_actor
  /movie_tag:
    delete:
      description: Delete movie tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/errno.errno'
      summary: Delete movie tags
      tags:
      - movie_tag
    get:
      description: Get movie tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/errno.errno'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.MovieTag'
                  type: array
              type: object
      summary: Get movie tags
      tags:
      - movie_tag
    post:
      description: Create movie tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/errno.errno'
      summary: Create movie tags
      tags:
      - movie_tag
  /ping:
    get:
      description: ping serivce working, db connect
      produces:
      - application/json
      responses:
        "200":
          description: OK
  /tag:
    delete:
      consumes:
      - application/json
      description: Delete a tag by ID
      parameters:
      - description: Tag IDs
        in: body
        name: id
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a tag by ID
      tags:
      - tag
    get:
      description: Get all tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/errno.errno'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Tag'
                  type: array
              type: object
      summary: Get all tags
      tags:
      - tag
    post:
      consumes:
      - application/json
      description: Create a new tag
      parameters:
      - description: Tag object
        in: body
        name: tag
        required: true
        schema:
          items:
            $ref: '#/definitions/model.Tag'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/errno.errno'
      summary: Create a new tag
      tags:
      - tag
  /tag/{id}:
    get:
      description: Get a single tag by ID
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/errno.errno'
      summary: Get a single tag by ID
      tags:
      - tag
    put:
      consumes:
      - application/json
      description: Update a tag by ID
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      - description: Tag object
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/model.Tag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Tag'
      summary: Update a tag by ID
      tags:
      - tag
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
