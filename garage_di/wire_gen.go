// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package garage_di

import (
	"github.com/gsxhnd/garage/garage_server/dao"
	"github.com/gsxhnd/garage/garage_server/handler"
	"github.com/gsxhnd/garage/garage_server/middleware"
	"github.com/gsxhnd/garage/garage_server/routes"
	"github.com/gsxhnd/garage/garage_server/service"
	"github.com/gsxhnd/garage/garage_server/task"
	"github.com/gsxhnd/garage/utils"
)

// Injectors from wire.go:

func InitApp(path string) (*Application, error) {
	config, err := utils.NewConfig(path)
	if err != nil {
		return nil, err
	}
	logger := utils.NewLogger(config)
	database, err := dao.NewDatabase(config, logger)
	if err != nil {
		return nil, err
	}
	testDao := dao.NewTestDao(database)
	testService := service.NewTestService(logger, testDao)
	rootHandler := handler.NewPingHandle(logger, testService)
	websocketHandler := handler.NewWebsocketHandler(logger)
	validate := utils.NewValidator()
	taskMgr := task.NewTaskMgr(logger)
	javHandler := handler.NewJavHandler(logger, validate, taskMgr)
	fFmpegHandler := handler.NewFFmpegHandler(logger, validate, taskMgr)
	handlerHandler := handler.Handler{
		RootHandler:      rootHandler,
		WebsocketHandler: websocketHandler,
		JavHandler:       javHandler,
		FFmpegHander:     fFmpegHandler,
	}
	middlewarer := middleware.NewMiddleware(logger)
	router, err := routes.NewRouter(config, handlerHandler, middlewarer)
	if err != nil {
		return nil, err
	}
	application := NewApplication(router)
	return application, nil
}
